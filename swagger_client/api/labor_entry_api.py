# coding: utf-8

"""
    MANUFACTURING/18.100.001

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LaborEntryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def labor_entry_delete_by_id(self, id, **kwargs):  # noqa: E501
        """Deletes the record by its session identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.labor_entry_delete_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The session ID of the record. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.labor_entry_delete_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.labor_entry_delete_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def labor_entry_delete_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes the record by its session identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.labor_entry_delete_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The session ID of the record. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method labor_entry_delete_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `labor_entry_delete_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/LaborEntry/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def labor_entry_get_ad_hoc_schema(self, **kwargs):  # noqa: E501
        """Retrieves the schema of custom fields of the entity from the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.labor_entry_get_ad_hoc_schema(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LaborEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.labor_entry_get_ad_hoc_schema_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.labor_entry_get_ad_hoc_schema_with_http_info(**kwargs)  # noqa: E501
            return data

    def labor_entry_get_ad_hoc_schema_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the schema of custom fields of the entity from the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.labor_entry_get_ad_hoc_schema_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LaborEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method labor_entry_get_ad_hoc_schema" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/LaborEntry/$adHocSchema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LaborEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def labor_entry_get_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves a record by the value of the session entity ID from the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.labor_entry_get_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The session ID of the record. (required)
        :param str select: The fields of the entity to be returned from the system.
        :param str filter: The conditions that determine which records should be selected from the system.
        :param str expand: The linked and detail entities that should be expanded.
        :param str custom: The fields that are not defined in the contract of the endpoint to be returned from the system.
        :return: LaborEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.labor_entry_get_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.labor_entry_get_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def labor_entry_get_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a record by the value of the session entity ID from the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.labor_entry_get_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The session ID of the record. (required)
        :param str select: The fields of the entity to be returned from the system.
        :param str filter: The conditions that determine which records should be selected from the system.
        :param str expand: The linked and detail entities that should be expanded.
        :param str custom: The fields that are not defined in the contract of the endpoint to be returned from the system.
        :return: LaborEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'select', 'filter', 'expand', 'custom']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method labor_entry_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `labor_entry_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'custom' in params:
            query_params.append(('$custom', params['custom']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/LaborEntry/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LaborEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def labor_entry_get_list(self, **kwargs):  # noqa: E501
        """Retrieves records that satisfy the specified conditions from the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.labor_entry_get_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str select: The fields of the entity to be returned from the system.
        :param str filter: The conditions that determine which records should be selected from the system.
        :param str expand: The linked and detail entities that should be expanded.
        :param str custom: The fields that are not defined in the contract of the endpoint to be returned from the system.
        :param int skip: The number of records to be skipped from the list of returned records.
        :param int top: The number of records to be returned from the system.
        :return: list[LaborEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.labor_entry_get_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.labor_entry_get_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def labor_entry_get_list_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves records that satisfy the specified conditions from the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.labor_entry_get_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str select: The fields of the entity to be returned from the system.
        :param str filter: The conditions that determine which records should be selected from the system.
        :param str expand: The linked and detail entities that should be expanded.
        :param str custom: The fields that are not defined in the contract of the endpoint to be returned from the system.
        :param int skip: The number of records to be skipped from the list of returned records.
        :param int top: The number of records to be returned from the system.
        :return: list[LaborEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['select', 'filter', 'expand', 'custom', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method labor_entry_get_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'custom' in params:
            query_params.append(('$custom', params['custom']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/LaborEntry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LaborEntry]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def labor_entry_put_entity(self, entity, **kwargs):  # noqa: E501
        """Creates a record or updates an existing record.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.labor_entry_put_entity(entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LaborEntry entity: The record to be passed to the system. (required)
        :param str select: The fields of the entity to be returned from the system.
        :param str filter: The conditions that determine which records should be selected from the system.
        :param str expand: The linked and detail entities that should be expanded.
        :param str custom: The fields that are not defined in the contract of the endpoint to be returned from the system.
        :return: LaborEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.labor_entry_put_entity_with_http_info(entity, **kwargs)  # noqa: E501
        else:
            (data) = self.labor_entry_put_entity_with_http_info(entity, **kwargs)  # noqa: E501
            return data

    def labor_entry_put_entity_with_http_info(self, entity, **kwargs):  # noqa: E501
        """Creates a record or updates an existing record.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.labor_entry_put_entity_with_http_info(entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LaborEntry entity: The record to be passed to the system. (required)
        :param str select: The fields of the entity to be returned from the system.
        :param str filter: The conditions that determine which records should be selected from the system.
        :param str expand: The linked and detail entities that should be expanded.
        :param str custom: The fields that are not defined in the contract of the endpoint to be returned from the system.
        :return: LaborEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity', 'select', 'filter', 'expand', 'custom']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method labor_entry_put_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity' is set
        if self.api_client.client_side_validation and ('entity' not in params or
                                                       params['entity'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `entity` when calling `labor_entry_put_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'custom' in params:
            query_params.append(('$custom', params['custom']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'entity' in params:
            body_params = params['entity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/LaborEntry', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LaborEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
