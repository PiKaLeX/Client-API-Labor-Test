# coding: utf-8

"""
    MANUFACTURING/18.100.001

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LaborEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details': 'list[LaborEntryDetail]',
        'batch_nbr': 'StringValue',
        'control_qty': 'DecimalValue',
        'post_period': 'StringValue',
        'hold': 'BooleanValue',
        'status': 'StringValue',
        'total_qty': 'DecimalValue',
        '_date': 'DateTimeValue'
    }

    attribute_map = {
        'details': 'Details',
        'batch_nbr': 'BatchNbr',
        'control_qty': 'ControlQty',
        'post_period': 'PostPeriod',
        'hold': 'Hold',
        'status': 'Status',
        'total_qty': 'TotalQty',
        '_date': 'Date'
    }

    def __init__(self, details=None, batch_nbr=None, control_qty=None, post_period=None, hold=None, status=None, total_qty=None, _date=None, _configuration=None):  # noqa: E501
        """LaborEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._details = None
        self._batch_nbr = None
        self._control_qty = None
        self._post_period = None
        self._hold = None
        self._status = None
        self._total_qty = None
        self.__date = None
        self.discriminator = None

        if details is not None:
            self.details = details
        if batch_nbr is not None:
            self.batch_nbr = batch_nbr
        if control_qty is not None:
            self.control_qty = control_qty
        if post_period is not None:
            self.post_period = post_period
        if hold is not None:
            self.hold = hold
        if status is not None:
            self.status = status
        if total_qty is not None:
            self.total_qty = total_qty
        if _date is not None:
            self._date = _date

    @property
    def details(self):
        """Gets the details of this LaborEntry.  # noqa: E501


        :return: The details of this LaborEntry.  # noqa: E501
        :rtype: list[LaborEntryDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this LaborEntry.


        :param details: The details of this LaborEntry.  # noqa: E501
        :type: list[LaborEntryDetail]
        """

        self._details = details

    @property
    def batch_nbr(self):
        """Gets the batch_nbr of this LaborEntry.  # noqa: E501


        :return: The batch_nbr of this LaborEntry.  # noqa: E501
        :rtype: StringValue
        """
        return self._batch_nbr

    @batch_nbr.setter
    def batch_nbr(self, batch_nbr):
        """Sets the batch_nbr of this LaborEntry.


        :param batch_nbr: The batch_nbr of this LaborEntry.  # noqa: E501
        :type: StringValue
        """

        self._batch_nbr = batch_nbr

    @property
    def control_qty(self):
        """Gets the control_qty of this LaborEntry.  # noqa: E501


        :return: The control_qty of this LaborEntry.  # noqa: E501
        :rtype: DecimalValue
        """
        return self._control_qty

    @control_qty.setter
    def control_qty(self, control_qty):
        """Sets the control_qty of this LaborEntry.


        :param control_qty: The control_qty of this LaborEntry.  # noqa: E501
        :type: DecimalValue
        """

        self._control_qty = control_qty

    @property
    def post_period(self):
        """Gets the post_period of this LaborEntry.  # noqa: E501


        :return: The post_period of this LaborEntry.  # noqa: E501
        :rtype: StringValue
        """
        return self._post_period

    @post_period.setter
    def post_period(self, post_period):
        """Sets the post_period of this LaborEntry.


        :param post_period: The post_period of this LaborEntry.  # noqa: E501
        :type: StringValue
        """

        self._post_period = post_period

    @property
    def hold(self):
        """Gets the hold of this LaborEntry.  # noqa: E501


        :return: The hold of this LaborEntry.  # noqa: E501
        :rtype: BooleanValue
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this LaborEntry.


        :param hold: The hold of this LaborEntry.  # noqa: E501
        :type: BooleanValue
        """

        self._hold = hold

    @property
    def status(self):
        """Gets the status of this LaborEntry.  # noqa: E501


        :return: The status of this LaborEntry.  # noqa: E501
        :rtype: StringValue
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LaborEntry.


        :param status: The status of this LaborEntry.  # noqa: E501
        :type: StringValue
        """

        self._status = status

    @property
    def total_qty(self):
        """Gets the total_qty of this LaborEntry.  # noqa: E501


        :return: The total_qty of this LaborEntry.  # noqa: E501
        :rtype: DecimalValue
        """
        return self._total_qty

    @total_qty.setter
    def total_qty(self, total_qty):
        """Sets the total_qty of this LaborEntry.


        :param total_qty: The total_qty of this LaborEntry.  # noqa: E501
        :type: DecimalValue
        """

        self._total_qty = total_qty

    @property
    def _date(self):
        """Gets the _date of this LaborEntry.  # noqa: E501


        :return: The _date of this LaborEntry.  # noqa: E501
        :rtype: DateTimeValue
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this LaborEntry.


        :param _date: The _date of this LaborEntry.  # noqa: E501
        :type: DateTimeValue
        """

        self.__date = _date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LaborEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LaborEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LaborEntry):
            return True

        return self.to_dict() != other.to_dict()
