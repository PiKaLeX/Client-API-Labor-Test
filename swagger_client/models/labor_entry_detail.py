# coding: utf-8

"""
    MANUFACTURING/18.100.001

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LaborEntryDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allocations': 'list[LaborEntryDetailAllocation]',
        'employee_id': 'StringValue',
        'end_time': 'DateTimeValue',
        'expiration_date': 'DateTimeValue',
        'gl_batch_line_nbr': 'IntValue',
        'gl_batch_nbr': 'StringValue',
        'in_doc_type': 'StringValue',
        'in_line_nbr': 'IntValue',
        'in_ref_nbr': 'StringValue',
        'inventory_id': 'StringValue',
        'labor_amount': 'DecimalValue',
        'labor_code': 'StringValue',
        'labor_rate': 'DecimalValue',
        'labor_time': 'StringValue',
        'labor_type': 'StringValue',
        'line_nbr': 'IntValue',
        'location': 'StringValue',
        'lot_serial_nbr': 'StringValue',
        'operation_nbr': 'StringValue',
        'order_type': 'StringValue',
        'production_nbr': 'StringValue',
        'qtyis_scrap': 'BooleanValue',
        'qty_scrapped': 'DecimalValue',
        'quantity': 'DecimalValue',
        'reason_code': 'StringValue',
        'receipt_nbr': 'StringValue',
        'scrap_action': 'StringValue',
        'shift': 'StringValue',
        'start_time': 'DateTimeValue',
        'subitem': 'StringValue',
        'transaction_attributes': 'list[LaborEntryTranAttributes]',
        'uom': 'StringValue',
        'warehouse': 'StringValue'
    }

    attribute_map = {
        'allocations': 'Allocations',
        'employee_id': 'EmployeeID',
        'end_time': 'EndTime',
        'expiration_date': 'ExpirationDate',
        'gl_batch_line_nbr': 'GLBatchLineNbr',
        'gl_batch_nbr': 'GLBatchNbr',
        'in_doc_type': 'INDocType',
        'in_line_nbr': 'INLineNbr',
        'in_ref_nbr': 'INRefNbr',
        'inventory_id': 'InventoryID',
        'labor_amount': 'LaborAmount',
        'labor_code': 'LaborCode',
        'labor_rate': 'LaborRate',
        'labor_time': 'LaborTime',
        'labor_type': 'LaborType',
        'line_nbr': 'LineNbr',
        'location': 'Location',
        'lot_serial_nbr': 'LotSerialNbr',
        'operation_nbr': 'OperationNbr',
        'order_type': 'OrderType',
        'production_nbr': 'ProductionNbr',
        'qtyis_scrap': 'QtyisScrap',
        'qty_scrapped': 'QtyScrapped',
        'quantity': 'Quantity',
        'reason_code': 'ReasonCode',
        'receipt_nbr': 'ReceiptNbr',
        'scrap_action': 'ScrapAction',
        'shift': 'Shift',
        'start_time': 'StartTime',
        'subitem': 'Subitem',
        'transaction_attributes': 'TransactionAttributes',
        'uom': 'UOM',
        'warehouse': 'Warehouse'
    }

    def __init__(self, allocations=None, employee_id=None, end_time=None, expiration_date=None, gl_batch_line_nbr=None, gl_batch_nbr=None, in_doc_type=None, in_line_nbr=None, in_ref_nbr=None, inventory_id=None, labor_amount=None, labor_code=None, labor_rate=None, labor_time=None, labor_type=None, line_nbr=None, location=None, lot_serial_nbr=None, operation_nbr=None, order_type=None, production_nbr=None, qtyis_scrap=None, qty_scrapped=None, quantity=None, reason_code=None, receipt_nbr=None, scrap_action=None, shift=None, start_time=None, subitem=None, transaction_attributes=None, uom=None, warehouse=None, _configuration=None):  # noqa: E501
        """LaborEntryDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allocations = None
        self._employee_id = None
        self._end_time = None
        self._expiration_date = None
        self._gl_batch_line_nbr = None
        self._gl_batch_nbr = None
        self._in_doc_type = None
        self._in_line_nbr = None
        self._in_ref_nbr = None
        self._inventory_id = None
        self._labor_amount = None
        self._labor_code = None
        self._labor_rate = None
        self._labor_time = None
        self._labor_type = None
        self._line_nbr = None
        self._location = None
        self._lot_serial_nbr = None
        self._operation_nbr = None
        self._order_type = None
        self._production_nbr = None
        self._qtyis_scrap = None
        self._qty_scrapped = None
        self._quantity = None
        self._reason_code = None
        self._receipt_nbr = None
        self._scrap_action = None
        self._shift = None
        self._start_time = None
        self._subitem = None
        self._transaction_attributes = None
        self._uom = None
        self._warehouse = None
        self.discriminator = None

        if allocations is not None:
            self.allocations = allocations
        if employee_id is not None:
            self.employee_id = employee_id
        if end_time is not None:
            self.end_time = end_time
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if gl_batch_line_nbr is not None:
            self.gl_batch_line_nbr = gl_batch_line_nbr
        if gl_batch_nbr is not None:
            self.gl_batch_nbr = gl_batch_nbr
        if in_doc_type is not None:
            self.in_doc_type = in_doc_type
        if in_line_nbr is not None:
            self.in_line_nbr = in_line_nbr
        if in_ref_nbr is not None:
            self.in_ref_nbr = in_ref_nbr
        if inventory_id is not None:
            self.inventory_id = inventory_id
        if labor_amount is not None:
            self.labor_amount = labor_amount
        if labor_code is not None:
            self.labor_code = labor_code
        if labor_rate is not None:
            self.labor_rate = labor_rate
        if labor_time is not None:
            self.labor_time = labor_time
        if labor_type is not None:
            self.labor_type = labor_type
        if line_nbr is not None:
            self.line_nbr = line_nbr
        if location is not None:
            self.location = location
        if lot_serial_nbr is not None:
            self.lot_serial_nbr = lot_serial_nbr
        if operation_nbr is not None:
            self.operation_nbr = operation_nbr
        if order_type is not None:
            self.order_type = order_type
        if production_nbr is not None:
            self.production_nbr = production_nbr
        if qtyis_scrap is not None:
            self.qtyis_scrap = qtyis_scrap
        if qty_scrapped is not None:
            self.qty_scrapped = qty_scrapped
        if quantity is not None:
            self.quantity = quantity
        if reason_code is not None:
            self.reason_code = reason_code
        if receipt_nbr is not None:
            self.receipt_nbr = receipt_nbr
        if scrap_action is not None:
            self.scrap_action = scrap_action
        if shift is not None:
            self.shift = shift
        if start_time is not None:
            self.start_time = start_time
        if subitem is not None:
            self.subitem = subitem
        if transaction_attributes is not None:
            self.transaction_attributes = transaction_attributes
        if uom is not None:
            self.uom = uom
        if warehouse is not None:
            self.warehouse = warehouse

    @property
    def allocations(self):
        """Gets the allocations of this LaborEntryDetail.  # noqa: E501


        :return: The allocations of this LaborEntryDetail.  # noqa: E501
        :rtype: list[LaborEntryDetailAllocation]
        """
        return self._allocations

    @allocations.setter
    def allocations(self, allocations):
        """Sets the allocations of this LaborEntryDetail.


        :param allocations: The allocations of this LaborEntryDetail.  # noqa: E501
        :type: list[LaborEntryDetailAllocation]
        """

        self._allocations = allocations

    @property
    def employee_id(self):
        """Gets the employee_id of this LaborEntryDetail.  # noqa: E501


        :return: The employee_id of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this LaborEntryDetail.


        :param employee_id: The employee_id of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._employee_id = employee_id

    @property
    def end_time(self):
        """Gets the end_time of this LaborEntryDetail.  # noqa: E501


        :return: The end_time of this LaborEntryDetail.  # noqa: E501
        :rtype: DateTimeValue
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this LaborEntryDetail.


        :param end_time: The end_time of this LaborEntryDetail.  # noqa: E501
        :type: DateTimeValue
        """

        self._end_time = end_time

    @property
    def expiration_date(self):
        """Gets the expiration_date of this LaborEntryDetail.  # noqa: E501


        :return: The expiration_date of this LaborEntryDetail.  # noqa: E501
        :rtype: DateTimeValue
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this LaborEntryDetail.


        :param expiration_date: The expiration_date of this LaborEntryDetail.  # noqa: E501
        :type: DateTimeValue
        """

        self._expiration_date = expiration_date

    @property
    def gl_batch_line_nbr(self):
        """Gets the gl_batch_line_nbr of this LaborEntryDetail.  # noqa: E501


        :return: The gl_batch_line_nbr of this LaborEntryDetail.  # noqa: E501
        :rtype: IntValue
        """
        return self._gl_batch_line_nbr

    @gl_batch_line_nbr.setter
    def gl_batch_line_nbr(self, gl_batch_line_nbr):
        """Sets the gl_batch_line_nbr of this LaborEntryDetail.


        :param gl_batch_line_nbr: The gl_batch_line_nbr of this LaborEntryDetail.  # noqa: E501
        :type: IntValue
        """

        self._gl_batch_line_nbr = gl_batch_line_nbr

    @property
    def gl_batch_nbr(self):
        """Gets the gl_batch_nbr of this LaborEntryDetail.  # noqa: E501


        :return: The gl_batch_nbr of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._gl_batch_nbr

    @gl_batch_nbr.setter
    def gl_batch_nbr(self, gl_batch_nbr):
        """Sets the gl_batch_nbr of this LaborEntryDetail.


        :param gl_batch_nbr: The gl_batch_nbr of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._gl_batch_nbr = gl_batch_nbr

    @property
    def in_doc_type(self):
        """Gets the in_doc_type of this LaborEntryDetail.  # noqa: E501


        :return: The in_doc_type of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._in_doc_type

    @in_doc_type.setter
    def in_doc_type(self, in_doc_type):
        """Sets the in_doc_type of this LaborEntryDetail.


        :param in_doc_type: The in_doc_type of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._in_doc_type = in_doc_type

    @property
    def in_line_nbr(self):
        """Gets the in_line_nbr of this LaborEntryDetail.  # noqa: E501


        :return: The in_line_nbr of this LaborEntryDetail.  # noqa: E501
        :rtype: IntValue
        """
        return self._in_line_nbr

    @in_line_nbr.setter
    def in_line_nbr(self, in_line_nbr):
        """Sets the in_line_nbr of this LaborEntryDetail.


        :param in_line_nbr: The in_line_nbr of this LaborEntryDetail.  # noqa: E501
        :type: IntValue
        """

        self._in_line_nbr = in_line_nbr

    @property
    def in_ref_nbr(self):
        """Gets the in_ref_nbr of this LaborEntryDetail.  # noqa: E501


        :return: The in_ref_nbr of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._in_ref_nbr

    @in_ref_nbr.setter
    def in_ref_nbr(self, in_ref_nbr):
        """Sets the in_ref_nbr of this LaborEntryDetail.


        :param in_ref_nbr: The in_ref_nbr of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._in_ref_nbr = in_ref_nbr

    @property
    def inventory_id(self):
        """Gets the inventory_id of this LaborEntryDetail.  # noqa: E501


        :return: The inventory_id of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._inventory_id

    @inventory_id.setter
    def inventory_id(self, inventory_id):
        """Sets the inventory_id of this LaborEntryDetail.


        :param inventory_id: The inventory_id of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._inventory_id = inventory_id

    @property
    def labor_amount(self):
        """Gets the labor_amount of this LaborEntryDetail.  # noqa: E501


        :return: The labor_amount of this LaborEntryDetail.  # noqa: E501
        :rtype: DecimalValue
        """
        return self._labor_amount

    @labor_amount.setter
    def labor_amount(self, labor_amount):
        """Sets the labor_amount of this LaborEntryDetail.


        :param labor_amount: The labor_amount of this LaborEntryDetail.  # noqa: E501
        :type: DecimalValue
        """

        self._labor_amount = labor_amount

    @property
    def labor_code(self):
        """Gets the labor_code of this LaborEntryDetail.  # noqa: E501


        :return: The labor_code of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._labor_code

    @labor_code.setter
    def labor_code(self, labor_code):
        """Sets the labor_code of this LaborEntryDetail.


        :param labor_code: The labor_code of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._labor_code = labor_code

    @property
    def labor_rate(self):
        """Gets the labor_rate of this LaborEntryDetail.  # noqa: E501


        :return: The labor_rate of this LaborEntryDetail.  # noqa: E501
        :rtype: DecimalValue
        """
        return self._labor_rate

    @labor_rate.setter
    def labor_rate(self, labor_rate):
        """Sets the labor_rate of this LaborEntryDetail.


        :param labor_rate: The labor_rate of this LaborEntryDetail.  # noqa: E501
        :type: DecimalValue
        """

        self._labor_rate = labor_rate

    @property
    def labor_time(self):
        """Gets the labor_time of this LaborEntryDetail.  # noqa: E501


        :return: The labor_time of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._labor_time

    @labor_time.setter
    def labor_time(self, labor_time):
        """Sets the labor_time of this LaborEntryDetail.


        :param labor_time: The labor_time of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._labor_time = labor_time

    @property
    def labor_type(self):
        """Gets the labor_type of this LaborEntryDetail.  # noqa: E501


        :return: The labor_type of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._labor_type

    @labor_type.setter
    def labor_type(self, labor_type):
        """Sets the labor_type of this LaborEntryDetail.


        :param labor_type: The labor_type of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._labor_type = labor_type

    @property
    def line_nbr(self):
        """Gets the line_nbr of this LaborEntryDetail.  # noqa: E501


        :return: The line_nbr of this LaborEntryDetail.  # noqa: E501
        :rtype: IntValue
        """
        return self._line_nbr

    @line_nbr.setter
    def line_nbr(self, line_nbr):
        """Sets the line_nbr of this LaborEntryDetail.


        :param line_nbr: The line_nbr of this LaborEntryDetail.  # noqa: E501
        :type: IntValue
        """

        self._line_nbr = line_nbr

    @property
    def location(self):
        """Gets the location of this LaborEntryDetail.  # noqa: E501


        :return: The location of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this LaborEntryDetail.


        :param location: The location of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._location = location

    @property
    def lot_serial_nbr(self):
        """Gets the lot_serial_nbr of this LaborEntryDetail.  # noqa: E501


        :return: The lot_serial_nbr of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._lot_serial_nbr

    @lot_serial_nbr.setter
    def lot_serial_nbr(self, lot_serial_nbr):
        """Sets the lot_serial_nbr of this LaborEntryDetail.


        :param lot_serial_nbr: The lot_serial_nbr of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._lot_serial_nbr = lot_serial_nbr

    @property
    def operation_nbr(self):
        """Gets the operation_nbr of this LaborEntryDetail.  # noqa: E501


        :return: The operation_nbr of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._operation_nbr

    @operation_nbr.setter
    def operation_nbr(self, operation_nbr):
        """Sets the operation_nbr of this LaborEntryDetail.


        :param operation_nbr: The operation_nbr of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._operation_nbr = operation_nbr

    @property
    def order_type(self):
        """Gets the order_type of this LaborEntryDetail.  # noqa: E501


        :return: The order_type of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this LaborEntryDetail.


        :param order_type: The order_type of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._order_type = order_type

    @property
    def production_nbr(self):
        """Gets the production_nbr of this LaborEntryDetail.  # noqa: E501


        :return: The production_nbr of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._production_nbr

    @production_nbr.setter
    def production_nbr(self, production_nbr):
        """Sets the production_nbr of this LaborEntryDetail.


        :param production_nbr: The production_nbr of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._production_nbr = production_nbr

    @property
    def qtyis_scrap(self):
        """Gets the qtyis_scrap of this LaborEntryDetail.  # noqa: E501


        :return: The qtyis_scrap of this LaborEntryDetail.  # noqa: E501
        :rtype: BooleanValue
        """
        return self._qtyis_scrap

    @qtyis_scrap.setter
    def qtyis_scrap(self, qtyis_scrap):
        """Sets the qtyis_scrap of this LaborEntryDetail.


        :param qtyis_scrap: The qtyis_scrap of this LaborEntryDetail.  # noqa: E501
        :type: BooleanValue
        """

        self._qtyis_scrap = qtyis_scrap

    @property
    def qty_scrapped(self):
        """Gets the qty_scrapped of this LaborEntryDetail.  # noqa: E501


        :return: The qty_scrapped of this LaborEntryDetail.  # noqa: E501
        :rtype: DecimalValue
        """
        return self._qty_scrapped

    @qty_scrapped.setter
    def qty_scrapped(self, qty_scrapped):
        """Sets the qty_scrapped of this LaborEntryDetail.


        :param qty_scrapped: The qty_scrapped of this LaborEntryDetail.  # noqa: E501
        :type: DecimalValue
        """

        self._qty_scrapped = qty_scrapped

    @property
    def quantity(self):
        """Gets the quantity of this LaborEntryDetail.  # noqa: E501


        :return: The quantity of this LaborEntryDetail.  # noqa: E501
        :rtype: DecimalValue
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this LaborEntryDetail.


        :param quantity: The quantity of this LaborEntryDetail.  # noqa: E501
        :type: DecimalValue
        """

        self._quantity = quantity

    @property
    def reason_code(self):
        """Gets the reason_code of this LaborEntryDetail.  # noqa: E501


        :return: The reason_code of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this LaborEntryDetail.


        :param reason_code: The reason_code of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._reason_code = reason_code

    @property
    def receipt_nbr(self):
        """Gets the receipt_nbr of this LaborEntryDetail.  # noqa: E501


        :return: The receipt_nbr of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._receipt_nbr

    @receipt_nbr.setter
    def receipt_nbr(self, receipt_nbr):
        """Sets the receipt_nbr of this LaborEntryDetail.


        :param receipt_nbr: The receipt_nbr of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._receipt_nbr = receipt_nbr

    @property
    def scrap_action(self):
        """Gets the scrap_action of this LaborEntryDetail.  # noqa: E501


        :return: The scrap_action of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._scrap_action

    @scrap_action.setter
    def scrap_action(self, scrap_action):
        """Sets the scrap_action of this LaborEntryDetail.


        :param scrap_action: The scrap_action of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._scrap_action = scrap_action

    @property
    def shift(self):
        """Gets the shift of this LaborEntryDetail.  # noqa: E501


        :return: The shift of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._shift

    @shift.setter
    def shift(self, shift):
        """Sets the shift of this LaborEntryDetail.


        :param shift: The shift of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._shift = shift

    @property
    def start_time(self):
        """Gets the start_time of this LaborEntryDetail.  # noqa: E501


        :return: The start_time of this LaborEntryDetail.  # noqa: E501
        :rtype: DateTimeValue
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this LaborEntryDetail.


        :param start_time: The start_time of this LaborEntryDetail.  # noqa: E501
        :type: DateTimeValue
        """

        self._start_time = start_time

    @property
    def subitem(self):
        """Gets the subitem of this LaborEntryDetail.  # noqa: E501


        :return: The subitem of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._subitem

    @subitem.setter
    def subitem(self, subitem):
        """Sets the subitem of this LaborEntryDetail.


        :param subitem: The subitem of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._subitem = subitem

    @property
    def transaction_attributes(self):
        """Gets the transaction_attributes of this LaborEntryDetail.  # noqa: E501


        :return: The transaction_attributes of this LaborEntryDetail.  # noqa: E501
        :rtype: list[LaborEntryTranAttributes]
        """
        return self._transaction_attributes

    @transaction_attributes.setter
    def transaction_attributes(self, transaction_attributes):
        """Sets the transaction_attributes of this LaborEntryDetail.


        :param transaction_attributes: The transaction_attributes of this LaborEntryDetail.  # noqa: E501
        :type: list[LaborEntryTranAttributes]
        """

        self._transaction_attributes = transaction_attributes

    @property
    def uom(self):
        """Gets the uom of this LaborEntryDetail.  # noqa: E501


        :return: The uom of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this LaborEntryDetail.


        :param uom: The uom of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._uom = uom

    @property
    def warehouse(self):
        """Gets the warehouse of this LaborEntryDetail.  # noqa: E501


        :return: The warehouse of this LaborEntryDetail.  # noqa: E501
        :rtype: StringValue
        """
        return self._warehouse

    @warehouse.setter
    def warehouse(self, warehouse):
        """Sets the warehouse of this LaborEntryDetail.


        :param warehouse: The warehouse of this LaborEntryDetail.  # noqa: E501
        :type: StringValue
        """

        self._warehouse = warehouse

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LaborEntryDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LaborEntryDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LaborEntryDetail):
            return True

        return self.to_dict() != other.to_dict()
