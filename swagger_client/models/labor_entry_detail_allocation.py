# coding: utf-8

"""
    MANUFACTURING/18.100.001

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LaborEntryDetailAllocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiration_date': 'DateTimeValue',
        'inventory_id': 'StringValue',
        'line_nbr': 'IntValue',
        'location': 'StringValue',
        'lot_serial_nbr': 'StringValue',
        'quantity': 'DecimalValue',
        'split_line_nbr': 'IntValue',
        'uom': 'StringValue'
    }

    attribute_map = {
        'expiration_date': 'ExpirationDate',
        'inventory_id': 'InventoryID',
        'line_nbr': 'LineNbr',
        'location': 'Location',
        'lot_serial_nbr': 'LotSerialNbr',
        'quantity': 'Quantity',
        'split_line_nbr': 'SplitLineNbr',
        'uom': 'UOM'
    }

    def __init__(self, expiration_date=None, inventory_id=None, line_nbr=None, location=None, lot_serial_nbr=None, quantity=None, split_line_nbr=None, uom=None, _configuration=None):  # noqa: E501
        """LaborEntryDetailAllocation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._expiration_date = None
        self._inventory_id = None
        self._line_nbr = None
        self._location = None
        self._lot_serial_nbr = None
        self._quantity = None
        self._split_line_nbr = None
        self._uom = None
        self.discriminator = None

        if expiration_date is not None:
            self.expiration_date = expiration_date
        if inventory_id is not None:
            self.inventory_id = inventory_id
        if line_nbr is not None:
            self.line_nbr = line_nbr
        if location is not None:
            self.location = location
        if lot_serial_nbr is not None:
            self.lot_serial_nbr = lot_serial_nbr
        if quantity is not None:
            self.quantity = quantity
        if split_line_nbr is not None:
            self.split_line_nbr = split_line_nbr
        if uom is not None:
            self.uom = uom

    @property
    def expiration_date(self):
        """Gets the expiration_date of this LaborEntryDetailAllocation.  # noqa: E501


        :return: The expiration_date of this LaborEntryDetailAllocation.  # noqa: E501
        :rtype: DateTimeValue
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this LaborEntryDetailAllocation.


        :param expiration_date: The expiration_date of this LaborEntryDetailAllocation.  # noqa: E501
        :type: DateTimeValue
        """

        self._expiration_date = expiration_date

    @property
    def inventory_id(self):
        """Gets the inventory_id of this LaborEntryDetailAllocation.  # noqa: E501


        :return: The inventory_id of this LaborEntryDetailAllocation.  # noqa: E501
        :rtype: StringValue
        """
        return self._inventory_id

    @inventory_id.setter
    def inventory_id(self, inventory_id):
        """Sets the inventory_id of this LaborEntryDetailAllocation.


        :param inventory_id: The inventory_id of this LaborEntryDetailAllocation.  # noqa: E501
        :type: StringValue
        """

        self._inventory_id = inventory_id

    @property
    def line_nbr(self):
        """Gets the line_nbr of this LaborEntryDetailAllocation.  # noqa: E501


        :return: The line_nbr of this LaborEntryDetailAllocation.  # noqa: E501
        :rtype: IntValue
        """
        return self._line_nbr

    @line_nbr.setter
    def line_nbr(self, line_nbr):
        """Sets the line_nbr of this LaborEntryDetailAllocation.


        :param line_nbr: The line_nbr of this LaborEntryDetailAllocation.  # noqa: E501
        :type: IntValue
        """

        self._line_nbr = line_nbr

    @property
    def location(self):
        """Gets the location of this LaborEntryDetailAllocation.  # noqa: E501


        :return: The location of this LaborEntryDetailAllocation.  # noqa: E501
        :rtype: StringValue
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this LaborEntryDetailAllocation.


        :param location: The location of this LaborEntryDetailAllocation.  # noqa: E501
        :type: StringValue
        """

        self._location = location

    @property
    def lot_serial_nbr(self):
        """Gets the lot_serial_nbr of this LaborEntryDetailAllocation.  # noqa: E501


        :return: The lot_serial_nbr of this LaborEntryDetailAllocation.  # noqa: E501
        :rtype: StringValue
        """
        return self._lot_serial_nbr

    @lot_serial_nbr.setter
    def lot_serial_nbr(self, lot_serial_nbr):
        """Sets the lot_serial_nbr of this LaborEntryDetailAllocation.


        :param lot_serial_nbr: The lot_serial_nbr of this LaborEntryDetailAllocation.  # noqa: E501
        :type: StringValue
        """

        self._lot_serial_nbr = lot_serial_nbr

    @property
    def quantity(self):
        """Gets the quantity of this LaborEntryDetailAllocation.  # noqa: E501


        :return: The quantity of this LaborEntryDetailAllocation.  # noqa: E501
        :rtype: DecimalValue
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this LaborEntryDetailAllocation.


        :param quantity: The quantity of this LaborEntryDetailAllocation.  # noqa: E501
        :type: DecimalValue
        """

        self._quantity = quantity

    @property
    def split_line_nbr(self):
        """Gets the split_line_nbr of this LaborEntryDetailAllocation.  # noqa: E501


        :return: The split_line_nbr of this LaborEntryDetailAllocation.  # noqa: E501
        :rtype: IntValue
        """
        return self._split_line_nbr

    @split_line_nbr.setter
    def split_line_nbr(self, split_line_nbr):
        """Sets the split_line_nbr of this LaborEntryDetailAllocation.


        :param split_line_nbr: The split_line_nbr of this LaborEntryDetailAllocation.  # noqa: E501
        :type: IntValue
        """

        self._split_line_nbr = split_line_nbr

    @property
    def uom(self):
        """Gets the uom of this LaborEntryDetailAllocation.  # noqa: E501


        :return: The uom of this LaborEntryDetailAllocation.  # noqa: E501
        :rtype: StringValue
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this LaborEntryDetailAllocation.


        :param uom: The uom of this LaborEntryDetailAllocation.  # noqa: E501
        :type: StringValue
        """

        self._uom = uom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LaborEntryDetailAllocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LaborEntryDetailAllocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LaborEntryDetailAllocation):
            return True

        return self.to_dict() != other.to_dict()
