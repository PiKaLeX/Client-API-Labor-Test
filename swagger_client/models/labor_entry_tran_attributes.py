# coding: utf-8

"""
    MANUFACTURING/18.100.001

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LaborEntryTranAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute': 'StringValue',
        'prod_attribute_line_nbr': 'IntValue',
        'required': 'BooleanValue',
        'tran_line_nbr': 'IntValue',
        'value': 'StringValue'
    }

    attribute_map = {
        'attribute': 'Attribute',
        'prod_attribute_line_nbr': 'ProdAttributeLineNbr',
        'required': 'Required',
        'tran_line_nbr': 'TranLineNbr',
        'value': 'Value'
    }

    def __init__(self, attribute=None, prod_attribute_line_nbr=None, required=None, tran_line_nbr=None, value=None, _configuration=None):  # noqa: E501
        """LaborEntryTranAttributes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attribute = None
        self._prod_attribute_line_nbr = None
        self._required = None
        self._tran_line_nbr = None
        self._value = None
        self.discriminator = None

        if attribute is not None:
            self.attribute = attribute
        if prod_attribute_line_nbr is not None:
            self.prod_attribute_line_nbr = prod_attribute_line_nbr
        if required is not None:
            self.required = required
        if tran_line_nbr is not None:
            self.tran_line_nbr = tran_line_nbr
        if value is not None:
            self.value = value

    @property
    def attribute(self):
        """Gets the attribute of this LaborEntryTranAttributes.  # noqa: E501


        :return: The attribute of this LaborEntryTranAttributes.  # noqa: E501
        :rtype: StringValue
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this LaborEntryTranAttributes.


        :param attribute: The attribute of this LaborEntryTranAttributes.  # noqa: E501
        :type: StringValue
        """

        self._attribute = attribute

    @property
    def prod_attribute_line_nbr(self):
        """Gets the prod_attribute_line_nbr of this LaborEntryTranAttributes.  # noqa: E501


        :return: The prod_attribute_line_nbr of this LaborEntryTranAttributes.  # noqa: E501
        :rtype: IntValue
        """
        return self._prod_attribute_line_nbr

    @prod_attribute_line_nbr.setter
    def prod_attribute_line_nbr(self, prod_attribute_line_nbr):
        """Sets the prod_attribute_line_nbr of this LaborEntryTranAttributes.


        :param prod_attribute_line_nbr: The prod_attribute_line_nbr of this LaborEntryTranAttributes.  # noqa: E501
        :type: IntValue
        """

        self._prod_attribute_line_nbr = prod_attribute_line_nbr

    @property
    def required(self):
        """Gets the required of this LaborEntryTranAttributes.  # noqa: E501


        :return: The required of this LaborEntryTranAttributes.  # noqa: E501
        :rtype: BooleanValue
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this LaborEntryTranAttributes.


        :param required: The required of this LaborEntryTranAttributes.  # noqa: E501
        :type: BooleanValue
        """

        self._required = required

    @property
    def tran_line_nbr(self):
        """Gets the tran_line_nbr of this LaborEntryTranAttributes.  # noqa: E501


        :return: The tran_line_nbr of this LaborEntryTranAttributes.  # noqa: E501
        :rtype: IntValue
        """
        return self._tran_line_nbr

    @tran_line_nbr.setter
    def tran_line_nbr(self, tran_line_nbr):
        """Sets the tran_line_nbr of this LaborEntryTranAttributes.


        :param tran_line_nbr: The tran_line_nbr of this LaborEntryTranAttributes.  # noqa: E501
        :type: IntValue
        """

        self._tran_line_nbr = tran_line_nbr

    @property
    def value(self):
        """Gets the value of this LaborEntryTranAttributes.  # noqa: E501


        :return: The value of this LaborEntryTranAttributes.  # noqa: E501
        :rtype: StringValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this LaborEntryTranAttributes.


        :param value: The value of this LaborEntryTranAttributes.  # noqa: E501
        :type: StringValue
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LaborEntryTranAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LaborEntryTranAttributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LaborEntryTranAttributes):
            return True

        return self.to_dict() != other.to_dict()
